import { reservationRoute } from './reservation.js';
import { changeReservationRoute } from './changeReservation.js';
import { cancelReservationRoute } from './cancelReservation.js';
import { checkAvailabilityRoute } from './checkAvailability.js';
import { askAiRoute } from './askAiRoute.js';


// üì¶ Viv Unified Payload (VUP) handler
// VUP format: 
// {
//   userMessage: Object|string,   // required
//   restaurantId: string,         // passed via URL param
//   route: 'reservation' | 'changeReservation' | 'cancelReservation' | 'checkAvailability' (optional if inferable)
// }

export const askVivRouter = async (req, res) => {
  console.log('[DEBUG] üß† askVivRouter triggered');

  const { restaurantId } = req.params;
  if (!restaurantId) {
    console.error('[ERROR] restaurantId missing from req.params');
    return res.status(400).json({ error: 'Missing restaurantId in URL.' });
  }

  if (!req.body || !req.body.userMessage) {
    console.error('[ERROR] Missing userMessage in request body');
    return res.status(400).json({ error: 'Missing userMessage in request body.' });
  }

  console.log('[DEBUG] Raw req.body:', req.body);

  let parsed;
  try {
    const rawUserMessage = typeof req.body.userMessage === 'string'
      ? JSON.parse(req.body.userMessage)
      : req.body.userMessage;

    parsed = {
      ...rawUserMessage, // flatten into top-level fields ‚úÖ
      restaurantId,
      route: req.body.route // retain explicit route if present
    };

  } catch (err) {
    console.error('[ERROR] Failed to parse userMessage string:', req.body.userMessage);
    return res.status(400).json({ error: 'Invalid userMessage JSON format.' });
  }

  // üß† Infer route only if not already provided
  if (!parsed.route) {
    if (parsed.confirmationCode && (parsed.newDate || parsed.newTimeSlot)) {
      parsed.route = 'changeReservation';
    } else if (parsed.confirmationCode && !parsed.newDate && !parsed.newTimeSlot) {
      parsed.route = 'cancelReservation';
    } else if (parsed.date && parsed.timeSlot && !parsed.name) {
      parsed.route = 'checkAvailability';
    } else if (parsed.name && parsed.date && parsed.timeSlot) {
      parsed.route = 'reservation';
      if (route === 'askAI') {
        return askAiRoute(req, res);
     }

    }
  }

  console.log('[DEBUG] ‚û°Ô∏è Routing to', parsed.route + 'Route');
  console.log('[DEBUG] Full parsed payload:', parsed);

  // üß† Patch req.body with parsed data for route modules
  req.body = parsed;

  try {
    switch (parsed.route) {
      case 'reservation':
        return await reservationRoute(req, res);
      case 'changeReservation':
        if (!parsed.confirmationCode) {
          return res.status(400).json({ error: 'Missing confirmationCode for changeReservation.' });
        }
        return await changeReservationRoute(req, res);
      case 'cancelReservation':
        if (!parsed.confirmationCode) {
          return res.status(400).json({ error: 'Missing confirmationCode for cancelReservation.' });
        }
        return await cancelReservationRoute(req, res);
      case 'checkAvailability':
        return await checkAvailabilityRoute(req, res);
      default:
        return res.status(400).json({ error: 'Invalid route specified.' });
    }
  } catch (err) {
    console.error('[ERROR] Failed to route:', err);
    return res.status(500).json({ error: 'Internal server error' });
  }
};
