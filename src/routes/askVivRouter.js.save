import { reservationRoute } from './reservation.js';
import { changeReservationRoute } from './changeReservation.js';
import { cancelReservationRoute } from './cancelReservation.js';
import { checkAvailabilityRoute } from './checkAvailability.js';
import { extractFields } from '../utils/extractFields.js';

export const askVivRouter = async (req, res) => {
  console.log('[DEBUG] 🧠 askVivRouter triggered');

  const { restaurantId } = req.params;
  if (!restaurantId) {
    console.error('[ERROR] restaurantId missing from req.params');
    return res.status(400).json({ error: 'Missing restaurantId in URL.' });
  }

  console.log('[DEBUG] Raw req.body:', req.body);

  let parsed;
  try {
    parsed = {
      ...req.body,
      userMessage:
        typeof req.body.userMessage === 'string'
          ? JSON.parse(req.body.userMessage)
          : req.body.userMessage,
      restaurantId
    };
  } catch (err) {
    console.error('[ERROR] Failed to parse userMessage string:', req.body.userMessage);
    return res.status(400).json({ error: 'Invalid userMessage JSON format.' });
  }

  // ✅ Validate userMessage exists and is an object
  if (
    !parsed.userMessage ||
    typeof parsed.userMessage !== 'object' ||
    Array.isArray(parsed.userMessage)
  ) {
    console.error('[ERROR] userMessage missing or invalid');
    return res.status(400).json({ error: 'Missing or invalid userMessage in request body.' });
  }

  let userMessage = parsed.userMessage;

  // 🧠 If message is free text, extract structured fields
  if (userMessage.text) {
    const aiParsed = await extractFields(userMessage.text, restaurantId);
    console.log('[DEBUG] Parsed AI result:', aiParsed);

    if (!aiParsed || aiParsed.error || !aiParsed.parsed) {
      return res.status(200).json({
        type: 'chat',
        parsed: null,
        result: null
      });
    }

    userMessage = aiParsed.parsed;
    parsed.userMessage = userMessage;
  }

  // 🧠 Determine route based on userMessage fields
  if (userMessage.confirmationCode && (userMessage.newDate || userMessage.newTimeSlot)) {
    parsed.route = 'changeReservation';
  } else if (userMessage.confirmationCode && !userMessage.newDate && !userMessage.newTimeSlot) {
    parsed.route = 'cancelReservation';
  } else if (userMessage.date && userMessage.timeSlot && !userMessage.name) {
    parsed.route = 'checkAvailability';
  } else if (userMessage.name && userMessage.date && userMessage.timeSlot) {
    parsed.route = 'reservation';
  }

  console.log('[DEBUG] ➡️ Routing to', parsed.route + 'Route');
  console.log('[DEBUG] Full parsed payload:', parsed);

  try {
    switch (parsed.route) {
      case 'reservation':
        return await reservationRoute(req, res, parsed);
      case 'changeReservation':
        if (!userMessage.confirmationCode) {
          return res.status(400).json({ error: 'Missing confirmationCode for changeReservation.' });
        }
        return await changeReservationRoute(req, res, parsed);
      case 'cancelReservation':
        if (!userMessage.confirmationCode) {
          return res.status(400).json({ error: 'Missing confirmationCode for cancelReservation.' });
        }
        return await cancelReservationRoute(req, res, parsed);
      case 'checkAvailability':
        return await checkAvailabilityRoute(req, res, parsed);
      default:
        return res.status(400).json({ error: 'Invalid route specified.' });
    }
  } catch (err) {
    console.error('[ERROR] Failed to route:', err);
    return res.status(500).json({ error: 'Internal server error' });
  }
};
